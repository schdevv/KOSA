클래스, 인스턴스 / 11.29


모든 클래스는 반드시 패키지로 묶어서 구현해야 하나?
> default 패키지가 존재하고 자바의 모든 클래스는 특정 패키지에 포함된다. default 패키지는 지양한다(거의 사용x)
> 패키지 이름은 계층 구조를 가진다. 도메인의 역순으로 구성. ex)도메인 : www.naver.or.kr 패키지 : kr.or.naver.bank
> 클래스를 작성할 때 패키지에 포함시키려면 : 자바 소스코드의 최상단 1줄 > package 패키지명; <

클래스의 정의 : 추상 데이터 타입 APT(Abstract Data Type), 객체 모델링의 수단, 인스턴스를 생성하는 수단
클래스는 객체와 관련지어 생각하면 더 쉽게 이해할 수 있다. 가장 쉽게 예를 들자면, 객체는 붕어빵이고 클래스는 붕어빵을 만드는 틀이다. 
예를 들어 아반떼, 그랜저, 소나타, SM5, K7을 객체라고 한다면, 승용차는 이들 객체의 클래스가 된다. 또 승용차, RV 차, 버스, 트럭이 객체라면, 자동차는 이들의 클래스이다. 같은 방법으로 자동차, 배, 비행기를 객체라고 한다면, 운송 수단은 이들 객체의 클래스이다. 
이처럼 클래스(class)는 공통되는 것들을 묶어서 대표적인 이름을 붙인 것이다. 또 클래스가 개념적이라면, 객체는 구체적이라 할 수 있다.


클래스의 구성
constructor(생성자들) 1개 이상 존재
field(필드들) 0개 이상 존재 :  상태 > 변수로 표현
method(메소드들) 0개 이상 존재 : 행위 > 함수로 표현(일련의 코드 묶음)


인스턴스(instance)는 같은 클래스에 속하는 개개의 객체로, 하나의 클래스에서 생성된 객체를 말한다. 
즉 클래스가 구체화되어, 클래스에서 정의된 속성과 성질을 가진 실제적인 객체로 표현된 것을 의미한다. 
이때 추상적인 개념인 클래스에서 실제 객체를 생성하는 것을 인스턴스화(instantiation)라고 한다.
인스턴스의 실체는 데이터를 저장하는 메모리 공간 + 코드 실행 기능

자바의 데이터 타입
프로그램은 데이터 처리를 잘해야한다. Data Structure(자료구조) : Stack, Heap, Tree, Queue + 이 자료구조를 이용한 어느정도 규칙이 완성된 '알고리즘'을 이용.
데이터는 메모리 공간(OS로부터 빌려온 JVM이 관리하는 메모리)에 저장.
자바는 Strong Type Language로 변수 선언시 데이터 타입을 반드시 명시해야한다. 변수 공간의 크기와 값의 종류를 결정하는 것이 데이터 타입의 역할.

변수 
변수 이름을 식별화 > 명명 규칙 
(1) 대소문자 구분, 식별자 길이의 제한은 없다.
(2) 예약어는 식별자로 사용 불가.
(3) 숫자로 시작 불가.
(4) 특수문자( "_" , "$")만 사용 가능.

Primitive Data Type
byte : 정수형 1byte / range : -128 ~ 127
short : 정수형 2byte / range : -32768 ~ 32767
int : 정수형 4byte / range : 
long : 정수형 8byte
float : 실수형 4byte
double : 실수형 8byte
char : 한 글자 2byte 자바에서 char를 표현할 때 ' ' 를 이용.
boolean : true or false 예약어

Reference Data Type
모든 클래스는 데이터 타입.

필드는 인스턴스마다 각각 공간이 따로 생성된다. Instance Variable


//12.06



